{"version":3,"sources":["redux/auth/selectors.ts","redux/auth/reducer.ts","pages/Login/Login.tsx","redux/users/selectors.ts","utils/object-helpers.ts","redux/users/reducer.ts","assets/images/userIcon.jpeg","pages/Users/User.tsx","components/Paginator/Paginator.tsx","assets/images/Iphone-spinner-2.gif","components/Preloader/Preloader.tsx","pages/Users/UsersSearchForm.tsx","pages/Users/Users.tsx","components/Header/Header.tsx","components/Navbar/Navbar.tsx","redux/app/selectors.ts","redux/app/reducer.ts","redux/profile/reducer.ts","redux/profile/selectors.ts","pages/Profile/Profile.tsx","api/chat-api.ts","redux/chat/sagas.ts","redux/chat/selectors.ts","pages/Chat/ChatPage.tsx","redux/weather/reducer.ts","redux/weather/selectors.ts","App.tsx","reportWebVitals.ts","api/instance.ts","api/auth-api.ts","api/security-api.ts","redux/auth/sagas.ts","api/users-api.ts","redux/users/sagas.ts","redux/app/sagas.ts","api/profile-api.ts","redux/profile/sagas.ts","api/weather-api.ts","redux/weather/sagas.ts","redux/sagaRoot.ts","redux/chat/reducer.ts","redux/store.ts","theme.ts","index.tsx"],"names":["getUserDataSelector","state","auth","initialState","userId","email","login","isAuth","captchaUrl","loading","error","authActions","type","payload","password","rememberMe","captcha","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","useSelector","classes","dispatch","useDispatch","useState","setEmail","setPassword","setRememberMe","to","Container","component","maxWidth","CssBaseline","className","Typography","variant","noValidate","TextField","required","fullWidth","label","name","autoComplete","autoFocus","value","onChange","e","target","FormControlLabel","control","Checkbox","color","Button","onClick","Grid","container","item","xs","Link","href","getUsersSelector","users","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","filter","term","friend","usersActions","root","justifyContent","borderBottom","userPhoto","height","backgroundSize","borderRadius","User","user","unfollow","follow","id","src","photos","small","followed","disabled","some","paginator","pageNumber","padding","cursor","selectedPage","fontWeight","borderColor","button","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","p","Preloader","preloader","select","fontSize","input","marginLeft","textAlign","usersSearchFormValidate","values","UsersSearchForm","React","memo","props","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","actions","notFound","Users","data","history","useHistory","useEffect","parsed","queryString","parse","location","search","substr","actualPage","actualFilter","page","Number","query","stringify","Card","length","weatherInfo","marginRight","img","border","loginLink","textDecoration","Header","weatherData","openMenu","setOpenMenu","authData","weatherIconUrl","weather","icon","AppBar","position","Toolbar","IconButton","edge","aria-label","temp","createStyles","Navbar","List","ListItem","update","ListItemIcon","ListItemText","primary","getInitializeAppData","app","initialized","appActions","posts","message","likesCount","profile","status","profileActions","newPostText","postId","getProfileDataSelector","wrapper","background","wallpaper","wallpaperImg","profileInfo","post","postMessage","postImg","addPostButton","deletePostButton","addPostForm","addPostInput","addPostText","marginBottom","profileImg","profileImgButton","profileButton","fullName","line","contacts","Profile","profileData","useParams","isOwner","setPostMessage","onDeletePost","console","CardContent","large","size","hidden","files","lookingForAJob","aboutMe","lookingForAJobDescription","Object","keys","key","contactTitle","contactValue","Contact","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","newMessages","JSON","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","send","newMessageHandlerCreator","statusChangedHandlerCreator","startMessagesListening","sendMessage","chatWatcher","_newMessageHandler","messages","_statusChangedHandler","call","getChatData","chat","ChatPage","Chat","Messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","overflowY","onScroll","element","currentTarget","abs","scrollHeight","scrollTop","clientHeight","m","index","Message","ref","log","photo","userName","AddMessageForm","setMessage","weatherActions","getWeatherDataSelector","rootOpen","gridTemplateColumns","gridTemplateRows","gridGap","gridTemplateAreas","rootClose","header","gridArea","navbar","content","App","isInit","exact","path","render","ResultCodesEnum","ResultCodeForCaptchaEnum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","response","res","delete","securityAPI","getUserData","getCaptchaUrl","logout","userDataWatcher","put","resultCode","Success","CaptchaIsRequired","takeEvery","usersAPI","getUsers","getUsersWatcher","initializeApp","initializeAppWatcher","profileAPI","photoFile","formData","FormData","append","getProfile","getStatus","updateStatus","savePhoto","saveProfile","profileDataWatcher","file","Error","weatherAPI","getWeatherData","weatherDataWatcher","rootSaga","all","chatReducer","action","v1","array","rootReducer","combineReducers","totalCount","newPost","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","createMuiTheme","ReactDOM","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.35e7a97f.chunk.js","sourcesContent":["import {AppStateType} from \"../store\";\n\nexport const getUserDataSelector = ((state: AppStateType) => state.auth)\n","import {InferActionsTypes} from \"../store\";\n\nconst initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null,\n    loading: false,\n    error: false,\n}\n\nexport const authReducer = (state = initialState, action: ActionsType): AuthStateType => {\n    switch (action.type) {\n        case 'REQUEST_USER_DATA': {\n            return { ...state, loading: true}\n        }\n        case 'SET_USER_DATA':\n        case 'GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n\n        case 'REQUEST_USER_DATA_FAILED': {\n            return {...state, error: true}\n        }\n        default:\n            return state;\n    }\n}\n\nexport const authActions = {\n    requestUserData: ( ) => ({type: 'REQUEST_USER_DATA'} as const),\n    requestUserDataSuccess: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\n        ({type: 'SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\n    requestCaptchaUrlSuccess: (captchaUrl: string) => ({type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const),\n    requestUserDataFailed: ( ) => ({type: 'REQUEST_USER_DATA_FAILED'} as const),\n    fetchedUserData: ( ) => ({type: 'FETCHED_USER_DATA'} as const),\n    fetchedCaptchaUrl: ( ) => ({type: 'FETCHED_CAPTCHA_URL'} as const),\n    fetchedLogin: ( email: string, password: string, rememberMe: boolean, captcha: string | null) => ({type: 'FETCHED_LOGIN', email, password, rememberMe, captcha} as const),\n    fetchedLogout: () => ({type: 'FETCHED_LOGOUT'} as const),\n}\n\nexport type AuthStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof authActions>\n\n\n","import React, {useState} from 'react';\nimport {\n    Button,\n    Checkbox,\n    Container,\n    CssBaseline,\n    FormControlLabel,\n    Grid, Link, makeStyles,\n    TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getUserDataSelector} from \"../../redux/auth/selectors\";\nimport { Redirect } from 'react-router-dom';\nimport {authActions} from \"../../redux/auth/reducer\";\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport const Login = () => {\n    const {isAuth, captchaUrl, loading, error} = useSelector(getUserDataSelector)\n    const classes = useStyles();\n\n    const dispatch = useDispatch()\n\n    let [email, setEmail] = useState('');\n    let [password, setPassword] = useState('');\n    let [rememberMe, setRememberMe] = useState(false);\n\n    const onSubmit = () => {\n        dispatch(authActions.fetchedLogin(email, password, rememberMe, captchaUrl))\n    }\n    if (isAuth) return <Redirect to=\"/profile\"/>\n\n\n    return <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n            <Typography component=\"h1\" variant=\"h5\">\n                Sign in\n            </Typography>\n            <form className={classes.form} noValidate>\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    label=\"Email Address\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    autoFocus\n                    value={email}\n                    onChange={e => setEmail(e.target.value)}\n                />\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    name=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    value={password}\n                    onChange={e => setPassword(e.target.value)}\n                />\n                <FormControlLabel\n                    control={<Checkbox value=\"remember\" color=\"primary\" />}\n                    label=\"Remember me\"\n                    value={rememberMe}\n                    onChange={() => setRememberMe(!rememberMe)}\n                />\n                <Button\n                    onClick={onSubmit}\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                >\n                    Sign In\n                </Button>\n                <Grid container>\n                    <Grid item xs>\n                        <Link href=\"https://social-network.samuraijs.com/login\" variant=\"body2\">\n                            Forgot password?\n                        </Link>\n                    </Grid>\n                    <Grid item>\n                        <Link href=\"https://social-network.samuraijs.com/signUp\" variant=\"body2\">\n                            {\"Don't have an account? Sign Up\"}\n                        </Link>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    </Container>\n};\n\n","import {AppStateType} from \"../store\";\n\nexport const getUsersSelector = ((state: AppStateType) => state.users)\n","\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u;\n    })\n}\n","import {InferActionsTypes} from \"../store\";\nimport {updateObjectInArray} from \"../../utils/object-helpers\";\n\nconst initialState = {\n    users: [] as any,\n    pageSize: 20,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    loading: false,\n    error: false,\n    followingInProgress: [] as Array<number>,\n    filter: {\n        term: '',\n        friend: null as null | boolean,\n    },\n}\n\nexport const usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'REQUEST_USERS': {\n            return {...state, loading: true}\n        }\n        case 'REQUEST_USERS_SUCCESS': {\n            return {...state, users: action.users.items, totalUsersCount: action.users.totalCount, loading: false}\n        }\n        case 'SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage,  loading: false}\n        }\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        case 'SET_FILTER': {\n            return {...state, filter: action.payload, loading: false}\n        }\n        case 'REQUEST_USERS_FAILED': {\n            return {...state, error: true}\n        }\n        default:\n            return state\n    }\n}\n\nexport const usersActions = {\n    followSuccess: (userId: number) => ({type: 'FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\n    requestUsers: ( ) => ({type: 'REQUEST_USERS'} as const),\n    requestUsersSuccess: (users: any) => ({type: 'REQUEST_USERS_SUCCESS', users} as const),\n    requestUsersFailed: ( ) => ({type: 'REQUEST_USERS_FAILED'} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SET_FILTER', payload: filter} as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const),\n    fetchedUsers: (currentPage: number, pageSize: number, term: string = '', friend: boolean | null  = null) =>\n        ({type: 'FETCHED_USERS', currentPage, pageSize, term, friend} as const),\n    fetchedFollow: (userId: number) => ({type: 'FETCHED_FOLLOW', userId} as const),\n    fetchedUnfollow: (userId: number) => ({type: 'FETCHED_UNFOLLOW', userId} as const),\n}\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof usersActions>\n","export default __webpack_public_path__ + \"static/media/userIcon.c20df02c.jpeg\";","import React from 'react'\nimport userPhoto from '../../assets/images/userIcon.jpeg'\nimport {NavLink} from 'react-router-dom'\nimport {UserType} from '../../types/types'\nimport {Button , makeStyles, Typography} from \"@material-ui/core\";\n\ntype PropsType = {\n    user: UserType,\n    unfollow: (userId: number) => void,\n    follow: (userId: number) => void,\n    followingInProgress: Array<number>,\n}\n\nconst useStyles = makeStyles((theme) => ({\n   root: {\n       margin: '10px',\n       display: 'flex',\n       justifyContent: 'space-between',\n       alignItems: 'center',\n       borderBottom: '3px solid #f7f7f7'\n   },\n    userPhoto: {\n        width: '50px',\n        height: '50px',\n        backgroundSize: 'cover',\n        borderRadius: '50%',\n        margin: '10px 20px 10px 100px',\n    },\n    main: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n    }\n}));\n\nexport const User: React.FC<PropsType> = ({user, unfollow, follow, followingInProgress}) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <div className={classes.main}>\n                <NavLink to={'/profile/' + user.id}>\n                    <img src={user.photos.small != null ? user.photos.small : userPhoto} className={classes.userPhoto}/>\n                </NavLink>\n                        <Typography variant=\"h6\">{user.name}</Typography>\n            </div>\n            <div>\n                {user.followed\n                    ? <Button variant=\"contained\" color=\"primary\" disabled={followingInProgress\n                        .some(id => id === user.id)}\n                              onClick={() => {\n                                  unfollow(user.id)\n                              }}>\n                        Unfollow</Button>\n                    : <Button variant=\"contained\" color=\"primary\" disabled={followingInProgress.some(id => id === user.id)}\n                              onClick={() => {\n                                  follow(user.id)\n                              }}>\n                        Follow</Button>}\n\n            </div>\n        </div>)\n}\n","import React, {useState} from 'react'\nimport {Button, makeStyles, Typography} from \"@material-ui/core\";\nimport cn from 'classnames'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paginator: {\n        margin: '10px',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    pageNumber: {\n        padding: '10px 20px',\n        backgroundColor: '#d7d7d7',\n        borderRadius: '3px',\n        margin: '8px',\n        cursor: 'pointer',\n\n    },\n    selectedPage: {\n        fontWeight: 'bold',\n        borderColor: 'black',\n        cursor: 'pointer',\n    },\n    button: {\n        padding: '10px 30px',\n        height: '50px',\n        marginTop: '7px',\n    }\n}));\n\n\nexport const Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\n                                          currentPage = 1,\n                                          onPageChanged = x => x,\n                                          portionSize = 10}) => {\n    const classes = useStyles();\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={cn(classes.paginator)}>\n        { portionNumber > 1 &&\n        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</Button> }\n\n        {pages\n            .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n            .map((p) => {\n                return <Typography variant=\"subtitle1\" className={ cn({\n                    [classes.selectedPage]: currentPage === p\n                }, classes.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</Typography>\n            })}\n        { portionCount > portionNumber &&\n        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</Button> }\n    </div>\n}\n","export default __webpack_public_path__ + \"static/media/Iphone-spinner-2.d3fbaf2b.gif\";","import React from 'react';\nimport preloader from '../../assets/images/Iphone-spinner-2.gif'\nexport const Preloader = () => {\n    return (\n        <div>\n            <img src={preloader} />\n        </div>\n    );\n};\n","import {Field, Form, Formik} from 'formik'\nimport React from 'react'\nimport {useSelector} from 'react-redux'\nimport {getUsersSelector} from \"../../redux/users/selectors\";\nimport {FilterType} from \"../../redux/users/reducer\";\nimport {Button, makeStyles, Typography} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    select: {\n        fontSize: '20px',\n        margin: '10px',\n        padding: '8px',\n        borderRadius: '5px',\n    },\n    input: {\n        fontSize: '20px',\n        marginLeft: '10px',\n        padding: '8px',\n        textAlign: 'center',\n        borderRadius: '5px',\n    },\n    button: {\n        padding: '9px 15px',\n    },\n\n\n}));\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype FriendFormType = 'true' | 'false' | 'null'\n\ntype FormType = {\n    term: string\n    friend: FriendFormType\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const classes = useStyles();\n\n    const filter = useSelector(getUsersSelector).filter\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form  className={classes.root}>\n                    <Typography variant=\"h6\">Find user:</Typography>\n                    <Field type=\"text\" name=\"term\" className={classes.input}/>\n\n                    <Field name=\"friend\" as=\"select\" className={classes.select}>\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <Button className={classes.button} variant=\"contained\" color=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getUsersSelector} from \"../../redux/users/selectors\";\nimport {FilterType, usersActions} from \"../../redux/users/reducer\";\nimport {User} from \"./User\";\nimport {UserType} from \"../../types/types\";\nimport {Paginator} from \"../../components/Paginator/Paginator\";\nimport {Card, makeStyles, Typography} from \"@material-ui/core\";\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport {UsersSearchForm} from \"./UsersSearchForm\";\nimport queryString from \"querystring\";\nimport {useHistory} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        margin: '0 10px',\n    },\n    actions: {\n        margin: '10px',\n        padding: '25px',\n        backgroundColor: '#e9e9e9',\n    },\n    users: {\n        margin: '10px',\n        backgroundColor: '#e9e9e9',\n    },\n    notFound: {\n        padding: '30px',\n        display: 'flex',\n        justifyContent: 'center',\n    }\n}));\n\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\n\n\nexport const Users: React.FC = () => {\n\n    const classes = useStyles();\n\n    const data = useSelector(getUsersSelector)\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n        let actualPage = data.currentPage\n        let actualFilter = data.filter\n        if (!!parsed.page) actualPage = Number(parsed.page)\n\n\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(usersActions.fetchedUsers(actualPage, data.pageSize, actualFilter.term, actualFilter.friend))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!data.filter.term) query.term = data.filter.term\n        if (data.filter.friend !== null) query.friend = String(data.filter.friend)\n        if (data.currentPage !== 1) query.page = String(data.currentPage)\n\n        history.push({\n            search: queryString.stringify(query)\n        })\n    }, [data.filter, data.currentPage, history])\n\n    const follow = (userId: number) => {\n        dispatch(usersActions.fetchedFollow(userId));\n    }\n    const unfollow = (userId: number) => {\n        dispatch(usersActions.fetchedUnfollow(userId));\n    }\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(usersActions.fetchedUsers(pageNumber, data.pageSize))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(usersActions.fetchedUsers(1, data.pageSize, filter.term, filter.friend))\n    }\n\n    if (data.loading) {\n        return <Preloader/>\n    }\n\n    return <Card className={classes.root}>\n        <Card className={classes.actions}>\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\n        </Card>\n        <Card className={classes.users}>\n            {data.users.length === 0 && <Card className={classes.notFound}>\n                <Typography variant=\"h5\">User with this name not found...</Typography>\n            </Card>\n            }\n            {\n                data.users.map((u: UserType) => <User follow={follow} unfollow={unfollow} user={u}\n                                                      followingInProgress={data.followingInProgress}\n                                                      key={u.id}\n\n                    />\n                )\n            }\n        </Card>\n        {data.users.length !== 0 &&\n        <Card className={classes.actions}>\n            <Paginator currentPage={data.pageSize}\n                       totalItemsCount={data.totalUsersCount} pageSize={data.pageSize} onPageChanged={onPageChanged}/>\n        </Card>}\n    </Card>\n};\n","import React from 'react';\nimport {AppBar, Button, createStyles, IconButton, makeStyles, Theme, Typography, Toolbar} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {NavLink} from \"react-router-dom\";\nimport {authActions, AuthStateType} from \"../../redux/auth/reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {WeatherStateType} from \"../../redux/weather/reducer\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    item: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    weatherInfo: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginRight: '50px',\n        backgroundColor: '#E9E9E9',\n        borderRadius: '5px',\n        height: '45px',\n        color: '#000',\n        padding: '0 20px',\n    },\n    img: {\n        marginTop: '8px',\n    },\n    button: {\n        border: '1px solid #E9E9E9',\n        padding: '9px 20px',\n    },\n    loginLink: {\n        color: '#fff',\n        textDecoration: 'none',\n    }\n}));\n\ntype HeaderProps = {\n    weatherData: WeatherStateType;\n    openMenu: boolean;\n    setOpenMenu: (openMenu: boolean) => void;\n    authData: AuthStateType;\n}\n\nexport const Header: React.FC<HeaderProps> = ({weatherData, openMenu, setOpenMenu, authData}) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const onSubmit = () => {\n        dispatch(authActions.fetchedLogout())\n    }\n\n    const weatherIconUrl = \"http://openweathermap.org/img/w/\" + weatherData.weatherData?.weather[0].icon + \".png\";\n\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar className={classes.root}>\n                <div className={classes.item}>\n                <IconButton onClick={() => setOpenMenu(!openMenu)} edge=\"start\"\n                            color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon/>\n                </IconButton>\n                <Typography variant=\"h6\">\n                    Description\n                </Typography>\n                </div>\n                <div className={classes.item}>\n                    {\n                        weatherData.weatherData &&\n                        <div className={classes.weatherInfo}>\n                            <Typography variant=\"subtitle2\"><b>In Prague:</b>{weatherData.weatherData.main.temp} degree</Typography>\n                            <img src={weatherIconUrl} className={classes.img}/>\n                        </div>\n                    }\n                    {authData.isAuth ? <Button className={classes.button} color=\"inherit\" onClick={onSubmit}>Logout</Button>\n                        :\n                    <Button className={classes.button} color=\"inherit\"><NavLink className={classes.loginLink} to='/login' >Login</NavLink></Button>\n                }\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\n","import React from 'react';\nimport {\n    createStyles,\n    makeStyles,\n    Theme,\n    ListItemIcon, ListItemText, ListItem, List, Card\n} from \"@material-ui/core\";\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '225px'\n        },\n    }),\n);\ntype NavbarProps = {\n\n}\n\nexport const Navbar: React.FC<NavbarProps> = () => {\n    const classes = useStyles();\n\n    const history = useHistory()\n\n    const toProfile = () => history.push(\"/profile\", { update: true });\n    const toUsers = () => history.push(\"/users\", { update: true });\n    const toChat = () => history.push(\"/chat\", { update: true });\n    const toNews = () => history.push(\"/news\", { update: true });\n\n    return (\n        <Card className={classes.root}>\n            <List component=\"nav\" aria-label=\"main mailbox folders\">\n                <ListItem button onClick={toProfile}>\n                    <ListItemIcon>\n                        <DraftsIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Profile\" />\n                </ListItem>\n                <ListItem button onClick={toUsers}>\n                    <ListItemIcon>\n                        <DraftsIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Users\" />\n                </ListItem>\n                <ListItem button onClick={toChat}>\n                    <ListItemIcon>\n                        <DraftsIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Chat\" />\n                </ListItem>\n                <ListItem button onClick={toNews}>\n                    <ListItemIcon>\n                        <DraftsIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"News\" />\n                </ListItem>\n            </List>\n        </Card>\n    );\n};\n\n","import {AppStateType} from \"../store\";\n\nexport const getInitializeAppData = ((state: AppStateType) => state.app)\n","import {InferActionsTypes} from \"../store\";\n\nlet initialState = {\n    initialized: false,\n    loading: false,\n    error: false\n};\n\nexport type InitialStateType = typeof initialState\n\nexport const appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"REQUEST_INITIALIZED\":\n            return {\n                ...state,\n                loading: true,\n            }\n        case 'INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true,\n                loading: false,\n            }\n        case \"INITIALIZED_FAILED\":\n            return {\n                ...state,\n                error: true,\n                loading: false,\n            }\n        default:\n            return state;\n    }\n}\n\nexport const appActions = {\n    requestInitialized: () => ({type: 'REQUEST_INITIALIZED'} as const),\n    initializedSuccess: () => ({type: 'INITIALIZED_SUCCESS'} as const),\n    initializedFailed: () => ({type: 'INITIALIZED_FAILED'} as const),\n    fetchedInitialized: () => ({type: 'FETCHED_INITIALIZE_APP'} as const),\n}\nexport type AppStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof appActions>\n\n\n","import {PhotosType, PostType, ProfileType} from \"../../types/types\";\nimport {InferActionsTypes} from \"../store\";\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n    loading: false,\n    error: true\n}\n\nexport const profileReducer = (state = initialState, action: ActionsType): ProfileStateType => {\n\n    switch (action.type) {\n        case 'ADD_POST': {\n            let newPost = {\n                id: 3,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case 'REQUEST_USER_PROFILE': {\n            return {\n                ...state,\n                loading: true,\n            }\n        }\n        case 'REQUEST_STATUS_SUCCESS': {\n            return {\n                ...state,\n                status: action.status,\n                loading: false\n            }\n        }\n        case 'REQUEST_USER_PROFILE_SUCCESS': {\n            return {\n                ...state,\n                profile: action.profile,\n                loading: false\n            }\n        }\n\n        case 'DELETE_POST':\n            return {\n                ...state,\n                posts: state.posts.filter(p => p.id !== action.postId)\n            }\n\n        case 'REQUEST_PHOTO_SUCCESS':\n            return {\n                ...state,\n                profile: {\n                    ...state.profile,\n                    photos: action.photos,\n                    loading: false\n                } as ProfileType\n            }\n        case 'REQUEST_USER_PROFILE_FAILED':\n            return {\n                ...state,\n                error: true\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport const profileActions = {\n    addPost: (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\n    deletePost: (postId: number) => ({type: 'DELETE_POST', postId} as const),\n    requestProfileData: () => ({type: 'REQUEST_USER_PROFILE'} as const),\n    requestUserProfileSuccess: (profile: ProfileType) => ({type: 'REQUEST_USER_PROFILE_SUCCESS', profile} as const),\n    requestStatusSuccess: (status: string) => ({type: 'REQUEST_STATUS_SUCCESS', status} as const),\n    requestProfileDataFailed: ( ) => ({type: 'REQUEST_USER_PROFILE_FAILED'} as const),\n    requestPhotoSuccess: (photos: PhotosType) => ({type: 'REQUEST_PHOTO_SUCCESS', photos} as const),\n    fetchedProfileData: ( userId: number) => ({type: 'FETCHED_USER_PROFILE', userId} as const),\n    fetchedNewProfileData: ( profile: ProfileType) => ({type: 'FETCHED_NEW_USER_PROFILE', profile} as const),\n    fetchedStatus: ( userId: number ) => ({type: 'FETCHED_STATUS', userId} as const),\n    fetchedNewStatus: ( status: string ) => ({type: 'FETCHED_NEW_STATUS', status} as const),\n    fetchedPhoto: ( photos: PhotosType ) => ({type: 'FETCHED_PHOTO', photos} as const),\n}\n\nexport type ProfileStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof profileActions>\n\n\n","import {AppStateType} from \"../store\";\n\nexport const getProfileDataSelector = ((state: AppStateType) => state.profile)\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {Button, Card, CardContent, makeStyles, TextField, Theme, Typography} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {profileActions} from \"../../redux/profile/reducer\";\nimport {useHistory, useParams} from 'react-router-dom';\nimport {getProfileDataSelector} from \"../../redux/profile/selectors\";\nimport {getUserDataSelector} from \"../../redux/auth/selectors\";\nimport {Preloader} from \"../../components/Preloader/Preloader\";\nimport userPhoto from '../../assets/images/userIcon.jpeg'\nimport {ContactsType} from \"../../types/types\";\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    wrapper: {\n        margin: '0 10px',\n    },\n    background: {\n        backgroundColor: '#e9e9e9',\n        margin: '15px',\n    },\n    wallpaper: {\n        padding: 0,\n    },\n    wallpaperImg: {\n        width: '100%',\n        height: '300px',\n    },\n    profileInfo: {\n        display: 'flex',\n        margin: '15px',\n        justifyContent: 'flex-start',\n        backgroundColor: '#e9e9e9',\n        borderRadius: '5px',\n    },\n    posts: {\n        margin: '20px',\n        padding: '10px',\n    },\n    post: {\n        margin: '10px',\n        padding: '10px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flexStart',\n    },\n    postMessage: {\n        margin: '0 20px',\n    },\n    likesCount: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    postImg: {\n        width: '40px',\n        borderRadius: '5px',\n    },\n    addPostButton: {\n        padding: '15px 25px',\n    },\n    deletePostButton: {\n        marginLeft: '20px',\n    },\n    addPostForm: {\n        padding: '30px',\n    },\n    addPostInput: {\n        marginRight: '10px',\n    },\n    addPostText: {\n        marginBottom: '10px',\n    },\n    profileImg: {\n        width: '400px',\n        borderRadius: '10px',\n        margin: '-150px 30px 0 0',\n        padding: 0,\n    },\n    profileImgButton: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-end',\n    },\n    profileButton: {\n        width: '180px',\n        margin: '20px 30px 0 0',\n    },\n    fullName: {\n        margin: '-80px 0 40px 0',\n        color: '#f6f6f6',\n    },\n    line: {\n        border: '1px solid #ccc',\n        backgroundColor: '#cccccc',\n    },\n    contacts: {\n        margin: '10px 30px 0',\n    },\n}))\n\nexport const Profile = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const authData = useSelector(getUserDataSelector);\n    const profileData = useSelector(getProfileDataSelector);\n    let userId = useParams<any>();\n    let history = useHistory();\n    let isOwner = !userId.userId;\n\n\n\n    const [editMode, setEditMode] = useState(false);\n\n    const [postMessage, setPostMessage] = useState('')\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            // @ts-ignore\n            dispatch(profileActions.fetchedPhoto(e.target.files[0]));\n        }\n    }\n\n    const onAddPost = () => {\n        dispatch(profileActions.addPost(postMessage))\n    }\n\n    const onDeletePost = (post: any) => {\n        dispatch(profileActions.deletePost(post.id))\n    }\n\n    useEffect(() => {\n        if (!userId?.userId) {\n            userId = authData.userId\n            if (!userId) {\n                history.push('/login');\n            }\n        }\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            if (Number(userId)) {\n                dispatch(profileActions.fetchedProfileData(userId));\n            } else {\n                dispatch(profileActions.fetchedProfileData(userId.userId));\n            }\n        }\n    }, [])\n\n    if (!profileData.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <Card className={classes.wrapper}>\n            <CardContent className={classes.wallpaper}>\n                <img className={classes.wallpaperImg} src=\"https://wallpaper-mania.com/wp-content/uploads/2018/09/High_resolution_wallpaper_background_ID_77701591408.jpg\"/>\n            </CardContent>\n            <CardContent className={classes.profileInfo}>\n                <div className={classes.profileImgButton}>\n                    <img className={classes.profileImg} src={profileData.profile?.photos.large || userPhoto}/>\n                    {isOwner &&\n                    <Button className={classes.profileButton} size=\"large\" variant=\"contained\" component=\"label\" color=\"primary\">Change image\n                        <input type=\"file\" hidden onChange={onMainPhotoSelected}/>\n                    </Button>}\n\n                </div>\n                <div>\n                    <Typography variant=\"h4\" className={classes.fullName}>{profileData.profile.fullName}</Typography>\n                    <Typography variant=\"h6\"><b>Looking for a\n                        job:</b> {profileData.profile.lookingForAJob ? \"yes\" : 'no'}</Typography>\n                    <hr className={classes.line}/>\n                    <Typography variant=\"h6\"><b>About me:</b> {profileData.profile.aboutMe}</Typography>\n                    <hr className={classes.line}/>\n                    {\n                        profileData.profile.lookingForAJob &&\n                        <Typography variant=\"h6\"><b>My skills:</b> {profileData.profile.lookingForAJobDescription}\n                        </Typography>\n                    }\n                </div>\n                <div className={classes.contacts}>\n                    <Typography variant=\"h6\"> <b>Contacts:</b>\n                        <hr className={classes.line}/>\n                        {\n                            Object\n                                .keys(profileData.profile.contacts)\n                                .map((key) => {\n                                    return <Contact key={key} contactTitle={key}\n                                                    contactValue={profileData.profile?.contacts[key as keyof ContactsType] || 'contacts'}/>\n                                })}</Typography>\n                </div>\n            </CardContent>\n            <Card  className={classes.background}>\n                <CardContent className={classes.posts}>\n                    {isOwner &&\n                    <Card className={classes.addPostForm}>\n                        <form noValidate autoComplete=\"off\">\n                            <Typography variant=\"h5\" className={classes.addPostText}>Add new post</Typography>\n                            <TextField value={postMessage} onChange={(e) => setPostMessage(e.target.value)}\n                                       className={classes.addPostInput} id=\"standard-basic\" variant=\"outlined\"\n                                       label=\"Enter your text...\"/>\n                            <Button onClick={onAddPost} variant=\"contained\" color=\"primary\"\n                                    className={classes.addPostButton}>Add post</Button>\n                        </form>\n                    </Card>\n                    }\n                    {profileData.posts.map((post) => <Card className={classes.post} key={post.id}>\n                        <img className={classes.postImg} src={profileData.profile?.photos.large || userPhoto}/>\n                        <Typography variant=\"subtitle2\" className={classes.postMessage}>{post.message}</Typography>\n                        <Typography variant=\"subtitle2\" className={classes.likesCount}><FavoriteIcon/>{post.likesCount}</Typography>\n                        <Button onClick={onDeletePost} size=\"small\" variant=\"contained\" color=\"secondary\" className={classes.deletePostButton}>Delete post</Button>\n                    </Card>)}\n                </CardContent>\n            </Card>\n        </Card>\n    )\n}\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <Typography><b>{contactTitle}</b>: {contactValue}</Typography>\n}\n","const subcribers = {\n    'messages-received': [] as MessagesReceivedSubscriberType[],\n    'status-changed': [] as StatusChangedSubscriberType[]\n}\n\nlet ws: WebSocket | null = null\ntype EventsNamesType = 'messages-received' | 'status-changed'\n\nconst closeHandler = () => {\n    notifySubscribersAboutStatus('pending')\n    setTimeout(createChannel, 3000)\n}\nconst messageHandler = (e: MessageEvent) => {\n    const newMessages = JSON.parse(e.data)\n    subcribers['messages-received'].forEach(s => s(newMessages))\n}\nconst openHandler = () => {\n    notifySubscribersAboutStatus('ready')\n}\nconst errorHandler = () => {\n    notifySubscribersAboutStatus('error')\n    console.error('REFRESH PAGE')\n}\nconst cleanUp = () => {\n    ws?.removeEventListener('close', closeHandler)\n    ws?.removeEventListener('message', messageHandler)\n    ws?.removeEventListener('open', openHandler)\n    ws?.removeEventListener('error', errorHandler)\n}\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n    subcribers['status-changed'].forEach(s => s(status))\n}\n\nfunction createChannel() {\n    cleanUp()\n    ws?.close()\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    notifySubscribersAboutStatus('pending')\n    ws.addEventListener('close', closeHandler)\n    ws.addEventListener('message', messageHandler)\n    ws.addEventListener('open', openHandler)\n    ws.addEventListener('error', errorHandler)\n}\n\n\nexport const chatAPI = {\n    start() {\n        createChannel()\n    },\n    stop() {\n        subcribers['messages-received'] = []\n        subcribers['status-changed'] = []\n        cleanUp()\n        ws?.close()\n    },\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subcribers[eventName].push(callback)\n        return () => {\n            // @ts-ignore\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\n        }\n    },\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    }\n}\n\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\n\nexport type ChatMessageAPIType = {\n    message: string\n    photo: string\n    userId: number\n    userName: string\n}\nexport type StatusType = 'pending' | 'ready' | 'error'\n","import {takeEvery, put, call} from \"redux-saga/effects\";\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../../api/chat-api\";\nimport {chatActions} from \"./reducer\";\n\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\n\nexport function* newMessageHandlerCreator(payload: any): any {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            //yield put(chatActions.messagesReceived(messages))\n        }\n    }\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\n\nexport function* statusChangedHandlerCreator (payload: any): any {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            //yield put(chatActions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\n\nexport function* startMessagesListening(): any {\n    yield call(chatAPI.start)\n    yield call(chatAPI.subscribe('messages-received', newMessageHandlerCreator))\n    yield call(chatAPI.subscribe('status-changed', statusChangedHandlerCreator))\n\n}\nexport function stopMessagesListening():any {\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator)\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator)\n    chatAPI.stop()\n}\n\nexport function* sendMessage(message: string): any {\n    yield call(chatAPI.sendMessage, message)\n}\n\nexport function* chatWatcher () {\n\n}\n","import {AppStateType} from \"../store\";\n\nexport const getChatData = ((state: AppStateType) => state.chat)\n","import React, {useEffect, useRef, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat/sagas\";\nimport {getChatData} from \"../../redux/chat/selectors\";\nimport {ChatMessageAPIType} from \"../../api/chat-api\";\n\n\nexport const ChatPage: React.FC = () => {\n    return <div>\n        <Chat/>\n    </div>\n}\n\nconst Chat: React.FC = () => {\n    const dispatch = useDispatch()\n    const status = useSelector(getChatData).status\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n    return <div>\n        {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\n        <>\n            <Messages/>\n            <AddMessageForm/>\n        </>\n    </div>\n}\n\nconst Messages: React.FC<{}> = ({}) => {\n    const messages = useSelector(getChatData).messages\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget;\n        if (Math.abs( (element.scrollHeight - element.scrollTop) - element.clientHeight ) < 300)\n        {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages])\n\n    return <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\n        <div ref={messagesAnchorRef}></div>\n    </div>\n}\n\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo( ({message}) => {\n    console.log(\">>>>>>Message\")\n    return <div>\n        <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\n        <br/>\n        {message.message}\n        <hr/>\n    </div>\n})\n\n\nconst AddMessageForm: React.FC<{}> = () => {\n    const [message, setMessage] = useState('')\n    const dispatch = useDispatch()\n\n    const status = useSelector(getChatData).status\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n\n    return <div>\n        <div>\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\n        </div>\n        <div>\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\n        </div>\n    </div>\n}\n","import {InferActionsTypes} from \"../store\";\nimport {WeatherDataType} from \"../../types/types\";\n\nlet initialState = {\n    weatherData: null as null | WeatherDataType,\n    loading: false,\n    error: false\n};\n\nexport type InitialStateType = typeof initialState\n\nexport const weatherReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"REQUEST_WEATHER_DATA\":\n            return {\n                ...state,\n                loading: true,\n            }\n        case 'WEATHER_DATA_SUCCESS':\n            return {\n                ...state,\n                weatherData: action.weatherData,\n                loading: false,\n            }\n        case \"WEATHER_DATA_FAILED\":\n            return {\n                ...state,\n                error: true,\n                loading: false,\n            }\n        default:\n            return state;\n    }\n}\n\nexport const weatherActions = {\n    requestWeatherData: () => ({type: 'REQUEST_WEATHER_DATA'} as const),\n    weatherDataSuccess: (weatherData: WeatherDataType) => ({type: 'WEATHER_DATA_SUCCESS', weatherData} as const),\n    initializedFailed: () => ({type: 'WEATHER_DATA_FAILED'} as const),\n    fetchedWeatherData: (name: string) => ({type: 'FETCHED_WEATHER_DATA', name} as const),\n}\n\nexport type WeatherStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof weatherActions>\n\n\n","import {AppStateType} from \"../store\";\n\nexport const getWeatherDataSelector = ((state: AppStateType) => state.weather)\n","import React, {useEffect, useState} from 'react';\nimport {Redirect, Route} from 'react-router-dom';\nimport {Login} from \"./pages/Login/Login\";\nimport {Users} from \"./pages/Users/Users\";\nimport {Header} from \"./components/Header/Header\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getUserDataSelector} from \"./redux/auth/selectors\";\nimport {getInitializeAppData} from \"./redux/app/selectors\";\nimport {Preloader} from \"./components/Preloader/Preloader\";\nimport {appActions} from \"./redux/app/reducer\";\nimport {Profile} from \"./pages/Profile/Profile\";\nimport {ChatPage} from \"./pages/Chat/ChatPage\";\nimport {weatherActions} from \"./redux/weather/reducer\";\nimport {getWeatherDataSelector} from \"./redux/weather/selectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  rootOpen: {\n    backgroundColor: '#eeeeee',\n    display: 'grid',\n    gridTemplateColumns: '225px 1fr',\n    gridTemplateRows: 'auto',\n    gridGap: '10px 0',\n    padding: 0,\n    margin: 0,\n    height: '100vh',\n    gridTemplateAreas:\n        `\"header header\"\n         \"navbar content\"`,\n  },\n  rootClose: {\n    backgroundColor: '#eeeeee',\n    display: 'grid',\n    gridGap: '10px 0',\n    gridTemplateColumns: '1fr',\n    gridTemplateRows: 'auto',\n    padding: 0,\n    margin: 0,\n    height: '100vh',\n    gridTemplateAreas:\n        `\"header\"\n         \"content\"`,\n  },\n  header: {\n    gridArea: 'header',\n  },\n  navbar: {\n    gridArea: 'navbar',\n  },\n  content: {\n    gridArea: 'content',\n  },\n}));\n\nexport function App() {\n  const isInit = useSelector(getInitializeAppData)\n  const authData = useSelector(getUserDataSelector)\n  const weatherData = useSelector(getWeatherDataSelector);\n\n  const dispatch = useDispatch()\n  const [openMenu, setOpenMenu] = useState<boolean>(false);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    dispatch(appActions.fetchedInitialized());\n    dispatch(weatherActions.fetchedWeatherData('Prague'));\n  },[])\n\n  if (!isInit) {\n    return <Preloader/>\n  }\n  return <div className={openMenu ? classes.rootOpen : classes.rootClose}>\n    <div className={classes.header}><Header weatherData={weatherData} authData={authData} openMenu={openMenu} setOpenMenu={setOpenMenu}/></div>\n    <div className={classes.navbar}>{openMenu && <Navbar/>}</div>\n    <div className={classes.content}>\n      <Route exact path='/'\n             render={() => <Redirect to={'/profile'}/>}/>\n      <Route path='/users'\n             render={() => <Users/>}/>\n      <Route path='/login'\n             render={() => <Login/>}/>\n      <Route path='/profile/:userId?'\n             render={() => <Profile/>}/>\n      <Route path='/chat'\n             render={() => <ChatPage/>}/>\n    </div>\n  </div>\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\nimport {UserType} from \"../types/types\";\n\nconst NETWORK_KEY = '7eaf4c11-a445-4b77-be52-da75e1dbe314'\nexport const WEATHER_KEY = '55598e00e9fc9fb8f3777e1dd9e2aef8'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": NETWORK_KEY\n    }\n})\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n}\n\nexport enum ResultCodeForCaptchaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\n\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D,\n    message: string[],\n    resultCode: RC\n}\n","import {APIResponseType, instance, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./instance\";\n\ntype MeResponseType = {\n    id: number,\n    email: string,\n    login: string,\n}\n\ntype LoginResponseType = {\n    userId: number,\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<APIResponseType<MeResponseType>>(`auth/me`).then(response => response.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(res => res.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}\n","import {instance} from \"./instance\";\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\n    }\n}\n","import {call, put, takeEvery } from \"redux-saga/effects\";\nimport {authActions} from \"./reducer\";\nimport {authAPI} from \"../../api/auth-api\";\nimport {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../../api/instance\";\nimport {securityAPI} from \"../../api/security-api\";\n\n\n\nexport function* getUserData(): any{\n    try {\n        yield put(authActions.requestUserData())\n        const data = yield call(authAPI.me)\n        let {id, login, email} = data.data\n        if (data.resultCode === ResultCodesEnum.Success) {\n            yield put(authActions.requestUserDataSuccess(id, login, email, true))\n        }\n    }\n    catch (error) {\n        yield put(authActions.requestUserDataFailed())\n    }\n}\n\nexport function* getCaptchaUrl(): any {\n    try {\n        yield  put(authActions.requestUserData())\n        const data = yield call(securityAPI.getCaptchaUrl)\n        const captchaUrl = data;\n    }\n    catch (error) {\n        yield  put(authActions.requestUserDataFailed())\n    }\n}\n\n\nexport function* login(payload: any): any {\n    try {\n        yield put(authActions.requestUserData())\n        const data = yield call(authAPI.login, payload.email, payload.password, payload.rememberMe, payload.captcha)\n        if (data.resultCode === ResultCodesEnum.Success) {\n            yield call(getUserData)\n        } else {\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\n                yield call(getCaptchaUrl)\n            }\n        }\n    } catch (error) {\n        yield put(authActions.requestUserDataFailed())\n    }\n}\nexport function* logout(): any {\n    try {\n        yield put(authActions.requestUserData())\n        const data = yield call(authAPI.logout)\n        if (data.data.resultCode === 0) {\n            yield put(authActions.requestUserDataSuccess(null, null, null, false))\n        }\n    } catch {\n        yield put(authActions.requestUserDataFailed())\n    }\n}\n\nexport function* userDataWatcher() {\n    // @ts-ignore\n    yield takeEvery('FETCHED_LOGIN', login);\n    yield takeEvery('FETCHED_LOGOUT', logout);\n    yield takeEvery('FETCHED_USER_DATA', getUserData);\n    yield takeEvery('FETCHED_CAPTCHA_URL', getCaptchaUrl);\n}\n","import {APIResponseType, GetItemsType, instance} from \"./instance\";\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\n            .then(res => res.data)\n    },\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n    }\n}\n","import {call, put, takeEvery} from \"redux-saga/effects\";\nimport {usersActions} from \"./reducer\";\nimport {usersAPI} from \"../../api/users-api\";\n\n\nexport function* getUsers (payload: any): any {\n    try {\n        yield put(usersActions.requestUsers())\n        yield put(usersActions.setCurrentPage(payload.currentPage))\n        yield put(usersActions.setFilter({term: payload.term,friend: payload.friend}))\n        const data = yield call(usersAPI.getUsers, payload.currentPage, payload.pageSize, payload.term, payload.friend)\n        yield put(usersActions.requestUsersSuccess(data))\n    } catch (error) {\n        yield put(usersActions.requestUsersFailed())\n    }\n}\n\nexport function* follow (payload: any): any {\n    try {\n        yield put(usersActions.requestUsers())\n        const data = yield call(usersAPI.follow, payload.userId)\n        yield put(usersActions.followSuccess(data))\n    }\n    catch (error) {\n        yield put(usersActions.requestUsersFailed())\n    }\n\n}\n\nexport function* unfollow (payload: any): any {\n    try {\n        yield put(usersActions.requestUsers())\n        const data = yield call(usersAPI.unfollow, payload.userId)\n        yield put(usersActions.unfollowSuccess(data))\n    }\n    catch (error) {\n        yield put(usersActions.requestUsersFailed())\n    }\n\n}\n\nexport function* getUsersWatcher () {\n    yield takeEvery('FETCHED_USERS', getUsers);\n    yield takeEvery('FETCHED_FOLLOW', follow);\n    yield takeEvery('FETCHED_UNFOLLOW', unfollow);\n}\n","import {call, put, takeEvery} from \"redux-saga/effects\";\nimport {appActions} from \"./reducer\";\nimport {getUserData} from \"../auth/sagas\";\n\nexport function* initializeApp(): any{\n    try {\n        yield put(appActions.requestInitialized())\n       yield call(getUserData)\n       yield put(appActions.initializedSuccess())\n    }\n    catch (error) {\n        yield put(appActions.initializedFailed())\n    }\n}\n\nexport function* initializeAppWatcher() {\n    // @ts-ignore\n    yield takeEvery('FETCHED_INITIALIZE_APP', initializeApp);\n}\n","import {APIResponseType, instance} from \"./instance\";\nimport {PhotosType, ProfileType} from \"../types/types\";\n\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\n    }\n}\n","import {takeEvery, put, call, select} from \"redux-saga/effects\";\nimport {profileAPI} from \"../../api/profile-api\";\nimport {profileActions} from \"./reducer\";\nimport {AppStateType} from \"../store\";\n\nexport function* getProfile(payload: any): any{\n    try {\n        yield put(profileActions.requestProfileData())\n        const data = yield call(profileAPI.getProfile, payload.userId)\n        yield put(profileActions.requestUserProfileSuccess(data))\n    }\n    catch (error) {\n        yield put(profileActions.requestProfileDataFailed())\n    }\n}\n\nexport function* getStatus(userId: any): any {\n    try {\n        yield put(profileActions.requestProfileData())\n        const data = yield call(profileAPI.getStatus, userId)\n        yield put(profileActions.requestStatusSuccess(data))\n    }\n    catch (error) {\n        yield put(profileActions.requestProfileDataFailed())\n    }\n}\n\nexport function* updateStatus(status: any): any {\n    try {\n        yield put(profileActions.requestProfileData())\n        const data = yield call(profileAPI.updateStatus, status)\n        yield put(profileActions.requestStatusSuccess(data))\n    }\n    catch (error) {\n        yield put(profileActions.requestProfileDataFailed())\n    }\n}\n\nexport function* savePhoto(file: any): any {\n    try {\n        yield put(profileActions.requestProfileData())\n        const data = yield call(profileAPI.savePhoto, file.photos)\n        yield put(profileActions.requestPhotoSuccess(data))\n    }\n    catch (error) {\n        yield put(profileActions.requestProfileDataFailed())\n    }\n}\n\nexport function* saveProfile(profile: any): any {\n    try {\n        yield put(profileActions.requestProfileData())\n        const userId = yield select((state: AppStateType) => state.auth.userId)\n        const data = yield call(profileAPI.saveProfile, profile)\n\n        if (data.resultCode === 0) {\n            if (userId != null) {\n                yield call(getProfile, userId)\n            } else {\n                throw new Error(\"userId can't be null\")\n            }\n        }\n    }\n    catch (error) {\n        yield put(profileActions.requestProfileDataFailed())\n    }\n}\n\nexport function* profileDataWatcher() {\n    yield takeEvery('FETCHED_USER_PROFILE', getProfile)\n    yield takeEvery('FETCHED_STATUS', getStatus)\n    yield takeEvery('FETCHED_NEW_STATUS', updateStatus)\n    yield takeEvery('FETCHED_PHOTO', savePhoto)\n    yield takeEvery('FETCHED_NEW_USER_PROFILE', saveProfile)\n}\n","import axios from \"axios\";\nimport {WeatherDataType} from \"../types/types\";\n\nexport const weatherAPI = (name: string) => {\n    return axios.get<WeatherDataType>(`https://api.openweathermap.org/data/2.5/weather?q=${name}&lang=ru&units=metric&appid=55598e00e9fc9fb8f3777e1dd9e2aef8`)\n        .then(response => response.data)\n}\n","import {call, put, takeEvery} from \"redux-saga/effects\";\nimport {weatherActions} from \"./reducer\";\nimport {weatherAPI} from \"../../api/weather-api\";\n\n\nexport function* getWeatherData(payload: any): any{\n    try {\n        yield put(weatherActions.requestWeatherData())\n        const data = yield call(weatherAPI, payload.name)\n        yield put(weatherActions.weatherDataSuccess(data))\n    }\n    catch (error) {\n        yield put(weatherActions.initializedFailed())\n    }\n}\n\nexport function* weatherDataWatcher() {\n    yield takeEvery('FETCHED_WEATHER_DATA', getWeatherData);\n}\n","import { all } from \"redux-saga/effects\";\nimport {userDataWatcher} from \"./auth/sagas\";\nimport {getUsersWatcher} from \"./users/sagas\";\nimport {initializeAppWatcher} from \"./app/sagas\";\nimport {profileDataWatcher} from \"./profile/sagas\";\nimport {chatWatcher} from \"./chat/sagas\";\nimport {weatherDataWatcher} from \"./weather/sagas\";\n\nexport default function* rootSaga() {\n    yield all([\n        userDataWatcher(),\n        getUsersWatcher(),\n        initializeAppWatcher(),\n        profileDataWatcher(),\n        chatWatcher(),\n        weatherDataWatcher(),\n    ])\n}\n","\nimport {v1} from 'uuid'\nimport {ChatMessageAPIType, StatusType} from \"../../api/chat-api\";\nimport {InferActionsTypes} from \"../store\";\n\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nlet initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'pending' as StatusType\n}\n\nconst chatReducer = (state = initialState, action: ActionsType): ChatStateType => {\n    switch (action.type) {\n        case 'MESSAGES_RECEIVED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\n                    .filter((m, index, array) => index >= array.length - 100)\n            }\n        case 'STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status\n            }\n        default:\n            return state\n    }\n}\n\nexport const chatActions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({type: 'MESSAGES_RECEIVED', payload: {messages}} as const),\n    statusChanged: (status: StatusType) => ({type: 'STATUS_CHANGED', payload: {status}} as const)\n}\n\n\n\nexport default chatReducer\n\nexport type ChatStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof chatActions>\n","import {authReducer} from \"./auth/reducer\";\nimport {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./sagaRoot\";\nimport {usersReducer} from \"./users/reducer\";\nimport {appReducer} from \"./app/reducer\";\nimport {profileReducer} from \"./profile/reducer\";\nimport chatReducer from \"./chat/reducer\";\nimport {weatherReducer} from \"./weather/reducer\";\n\nlet rootReducer = combineReducers({\n    auth: authReducer,\n    users: usersReducer,\n    profile: profileReducer,\n    app: appReducer,\n    chat: chatReducer,\n    weather: weatherReducer,\n})\n\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nconst sagaMiddleware = createSagaMiddleware()\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)))\n\nsagaMiddleware.run(rootSaga)\n","import {createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\nimport {ThemeProvider} from '@material-ui/core';\nimport {theme} from \"./theme\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </ThemeProvider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}